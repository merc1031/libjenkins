-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Jenkins API interface
--   
--   Jenkins API interface. It supports REST and Discovery APIs
@package libjenkins
@version 0.5.0


-- | Optics for <tt>http-conduit</tt> types
module Network.HTTP.Conduit.Lens

-- | <a>method</a> lens
method :: Lens' Request Method

-- | <a>secure</a> lens
secure :: Lens' Request Bool

-- | <a>host</a> lens
host :: Lens' Request ByteString

-- | <a>port</a> lens
port :: Lens' Request Int

-- | <a>path</a> lens
path :: Lens' Request ByteString

-- | <a>queryString</a> lens
queryString :: Lens' Request ByteString

-- | <a>requestBody</a> lens
requestBody :: Lens' Request RequestBody

-- | <a>requestHeaders</a> lens
requestHeaders :: Lens' Request RequestHeaders

-- | <a>proxy</a>
proxy :: Lens' Request (Maybe Proxy)

-- | <a>hostAddress</a>
hostAddress :: Lens' Request (Maybe HostAddress)

-- | <a>rawBody</a>
rawBody :: Lens' Request Bool

-- | <a>decompress</a>
decompress :: Lens' Request (ByteString -> Bool)

-- | <a>redirectCount</a> lens
redirectCount :: Lens' Request Int

-- | <a>checkStatus</a> lens
checkStatus :: Lens' Request (Status -> ResponseHeaders -> CookieJar -> Maybe SomeException)

-- | <a>responseTimeout</a> lens
responseTimeout :: Lens' Request (Maybe Int)

-- | <a>cookieJar</a>
cookieJar :: Lens' Request (Maybe CookieJar)

-- | <a>getConnectionWrapper</a>
getConnectionWrapper :: Lens' Request (Maybe Int -> HttpException -> IO (ConnRelease, Connection, ManagedConn) -> IO (Maybe Int, (ConnRelease, Connection, ManagedConn)))

-- | <tt>http-conduit</tt> exceptions
class AsHttpException t
_HttpException :: AsHttpException t => Prism' t HttpException

-- | <a>StatusCodeException</a> exception
_StatusCodeException :: AsHttpException t => Prism' t (Status, ResponseHeaders, CookieJar)

-- | <a>InvalidUrlException</a> exception
_InvalidUrlException :: AsHttpException t => Prism' t (String, String)

-- | <a>TooManyRedirects</a> exception
_TooManyRedirects :: AsHttpException t => Prism' t [Response ByteString]

-- | <a>UnparseableRedirect</a> exception
_UnparseableRedirect :: AsHttpException t => Prism' t (Response ByteString)

-- | <a>TooManyRetries</a> exception
_TooManyRetries :: AsHttpException t => Prism' t ()

-- | <a>HttpParserException</a> exception
_HttpParserException :: AsHttpException t => Prism' t String

-- | <a>HandshakeFailed</a> exception
_HandshakeFailed :: AsHttpException t => Prism' t ()

-- | <a>OverlongHeaders</a> exception
_OverlongHeaders :: AsHttpException t => Prism' t ()

-- | <a>ResponseTimeout</a> exception
_ResponseTimeout :: AsHttpException t => Prism' t ()

-- | <a>FailedConnectionException</a> exception
_FailedConnectionException :: AsHttpException t => Prism' t (String, Int)

-- | <a>ExpectedBlankAfter100Continue</a> exception
_ExpectedBlankAfter100Continue :: AsHttpException t => Prism' t ()

-- | <a>InvalidStatusLine</a> exception
_InvalidStatusLine :: AsHttpException t => Prism' t ByteString

-- | <a>InvalidHeader</a> exception
_InvalidHeader :: AsHttpException t => Prism' t ByteString

-- | <a>InternalIOException</a> exception
_InternalIOException :: AsHttpException t => Prism' t IOException

-- | <a>ProxyConnectException</a> exception
_ProxyConnectException :: AsHttpException t => Prism' t (ByteString, Int, Either ByteString HttpException)

-- | <a>NoResponseDataReceived</a> exception
_NoResponseDataReceived :: AsHttpException t => Prism' t ()

-- | <a>TlsException</a> exception
_TlsException :: AsHttpException t => Prism' t SomeException

-- | <a>TlsNotSupported</a> exception
_TlsNotSupported :: AsHttpException t => Prism' t ()

-- | <a>ResponseBodyTooShort</a> exception
_ResponseBodyTooShort :: AsHttpException t => Prism' t (Word64, Word64)

-- | <a>InvalidChunkHeaders</a> exception
_InvalidChunkHeaders :: AsHttpException t => Prism' t ()

-- | <a>IncompleteHeaders</a> exception
_IncompleteHeaders :: AsHttpException t => Prism' t ()
instance AsHttpException SomeException
instance AsHttpException HttpException


-- | Jenkins REST API method construction
module Jenkins.Rest.Method

-- | Jenkins RESTFul API method encoding
data Method :: Type -> Format -> *

-- | Method types
data Type
Query :: Type
Complete :: Type

-- | Response formats
data Format

-- | Response format singleton type
data As :: Format -> *

-- | Convert <a>Text</a> to <a>Method</a>
text :: Text -> Method Complete f

-- | Convert <a>Integer</a> to <a>Method</a>
int :: Integer -> Method Complete f

-- | Combine path and query
(-?-) :: Method Complete f -> Method Query f -> Method Complete f

-- | Combine 2 paths
(-/-) :: Method Complete f -> Method Complete f -> Method Complete f

-- | Make a field-value pair
(-=-) :: Text -> Text -> Method Query f

-- | Combine 2 queries
(-&-) :: Method Query f -> Method Query f -> Method Query f

-- | List-to-query convenience combinator
--   
--   <pre>
--   &gt;&gt;&gt; render (query [("foo", Nothing), ("bar", Just "baz"), ("quux", Nothing)])
--   "foo&amp;bar=baz&amp;quux"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; render (query [])
--   ""
--   </pre>
query :: [(Text, Maybe Text)] -> Method Query f

-- | Choose response format
as :: Method Complete f -> As f -> Method Complete f

-- | JSON response format
class JSONy t
json :: JSONy t => t JSON

-- | XML response format
class XMLy t
xml :: XMLy t => t XML

-- | Python response format
class Pythony t
python :: Pythony t => t Python

-- | Job API method
--   
--   <pre>
--   &gt;&gt;&gt; render (job "name" `as` json)
--   "job/name/api/json"
--   </pre>
job :: Text -> Method Complete f

-- | Job build API method
--   
--   <pre>
--   &gt;&gt;&gt; render (build "name" 4 `as` json)
--   "job/name/4/api/json"
--   </pre>
build :: Integral a => Text -> a -> Method Complete f

-- | View API method
--   
--   <pre>
--   &gt;&gt;&gt; render (view "name" `as` xml)
--   "view/name/api/xml"
--   </pre>
view :: Text -> Method Complete f

-- | Queue API method
--   
--   <pre>
--   &gt;&gt;&gt; render (queue `as` python)
--   "queue/api/python"
--   </pre>
queue :: Method Complete f

-- | Statistics API method
--   
--   <pre>
--   &gt;&gt;&gt; render (overallLoad `as` xml)
--   "overallLoad/api/xml"
--   </pre>
overallLoad :: Method Complete f

-- | Node API method
--   
--   <pre>
--   &gt;&gt;&gt; render (computer `as` python)
--   "computer/api/python"
--   </pre>
computer :: Method Complete f

-- | Render <a>Method</a> to something that can be sent over the wire
--   
--   <pre>
--   &gt;&gt;&gt; render ("" `as` xml)
--   "api/xml"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; render xml
--   "api/xml"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; render ("job" -/- 7 `as` xml)
--   "job/7/api/xml"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; render ("job" -/- 7 `as` xml)
--   "job/7/api/xml"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; render ("job" -/- 7 `as` json)
--   "job/7/api/json"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; render (text "restart")
--   "restart"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; render ("job" -?- "name" -=- "foo" -&amp;- "title" -=- "bar")
--   "job?name=foo&amp;title=bar"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; render ("job" -?- "name" -&amp;- "title" -=- "bar")
--   "job?name&amp;title=bar"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; render ("job" -/- 7 `as` json -?- "name" -&amp;- "title" -=- "bar")
--   "job/7/api/json?name&amp;title=bar"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; render ("job" -/- "ДМИТРИЙ" `as` xml)
--   "job/%D0%94%D0%9C%D0%98%D0%A2%D0%A0%D0%98%D0%99/api/xml"
--   </pre>
render :: Method t f -> ByteString

-- | Insert "/" between two <a>String</a>-like things and concatenate
--   everything.
slash :: (IsString m, Monoid m) => m -> m -> m
instance Typeable Type
instance Typeable Format
instance Eq (As f)
instance Show (As f)
instance Show (As f) => Show (Method t f)
instance Show Type
instance Eq Type
instance Data Type
instance Generic Type
instance Show Format
instance Eq Format
instance Data Format
instance Generic Format
instance Datatype D1Type
instance Constructor C1_0Type
instance Constructor C1_1Type
instance Datatype D1Format
instance Constructor C1_0Format
instance Constructor C1_1Format
instance Constructor C1_2Format
instance t ~ 'Complete => Pythony (Method t)
instance Pythony As
instance t ~ 'Complete => XMLy (Method t)
instance XMLy As
instance t ~ 'Complete => JSONy (Method t)
instance JSONy As
instance IsString (Method 'Query f)
instance IsString (Method 'Complete f)
instance t ~ 'Complete => Num (Method t f)


-- | Jenkins REST API interface internals
module Jenkins.Rest.Internal

-- | Jenkins REST API query sequence description
newtype Jenkins a
Jenkins :: F JenkinsF a -> Jenkins a
unJenkins :: Jenkins a -> F JenkinsF a

-- | Jenkins REST API query
data JenkinsF a
Get :: Method Complete f -> (ResumableSource (ResourceT IO) ByteString -> a) -> JenkinsF a
Post :: (forall f. Method Complete f) -> ByteString -> a -> JenkinsF a
Conc :: Jenkins a -> Jenkins b -> (a -> b -> c) -> JenkinsF c
Or :: Jenkins a -> Jenkins a -> JenkinsF a
IO :: IO a -> JenkinsF a
With :: (Request -> Request) -> Jenkins b -> (b -> a) -> JenkinsF a
Dcon :: JenkinsF a

-- | Lift <a>JenkinsF</a> to <a>Jenkins</a>
liftJ :: JenkinsF a -> Jenkins a

-- | Jenkins connection settings
--   
--   <a>_jenkinsApiToken</a> may be user's password, Jenkins does not make
--   any distinction between these concepts
data ConnectInfo
ConnectInfo :: String -> Int -> Text -> Text -> ConnectInfo

-- | Jenkins URL, e.g. <tt>http://example.com/jenkins</tt>
_jenkinsUrl :: ConnectInfo -> String

-- | Jenkins port, e.g. <tt>8080</tt>
_jenkinsPort :: ConnectInfo -> Int

-- | Jenkins user, e.g. <tt>jenkins</tt>
_jenkinsUser :: ConnectInfo -> Text

-- | Jenkins user API token
_jenkinsApiToken :: ConnectInfo -> Text

-- | The result of Jenkins REST API queries
data Result e v

-- | Exception <tt>e</tt> was thrown while querying Jenkins
Error :: e -> Result e v

-- | The client was explicitly disconnected
Disconnect :: Result e v

-- | Querying successfully finished the with value <tt>v</tt>
Result :: v -> Result e v
newtype JenkinsException
JenkinsHttpException :: HttpException -> JenkinsException

-- | Query Jenkins API using <a>Jenkins</a> description
--   
--   Successful result is either <a>Disconnect</a> or <tt> <a>Result</a> v
--   </tt>
--   
--   If <a>HttpException</a> was thrown by <tt>http-conduit</tt>,
--   <a>runJenkins</a> catches it and wraps in <a>Error</a>. Other
--   exceptions are <i>not</i> catched
runJenkins :: HasConnectInfo t => t -> Jenkins a -> IO (Result JenkinsException a)
runJenkinsInternal :: HasConnectInfo t => t -> Jenkins a -> IO (Maybe a)

-- | A prism into Jenkins error
_Error :: Prism (Result e a) (Result e' a) e e'

-- | A prism into disconnect
_Disconnect :: Prism' (Result e a) ()

-- | A prism into result
_Result :: Prism (Result e a) (Result e b) a b

-- | Interpret <a>JenkinsF</a> AST in <a>IO</a>
iterJenkinsIO :: Manager -> Jenkins a -> MaybeT (ReaderT Request (ResourceT IO)) a

-- | Tear down <a>JenkinsF</a> AST with a <a>JenkinsF</a>-algebra
iterJenkins :: Monad m => (JenkinsF (m a) -> m a) -> Jenkins a -> m a

-- | <a>JenkinsF</a> AST interpreter
interpreter :: Manager -> JenkinsF (MaybeT (ReaderT Request (ResourceT IO)) a) -> MaybeT (ReaderT Request (ResourceT IO)) a
intoIO :: Monad m => Manager -> ((forall b. Jenkins b -> IO (StT ResourceT (StT (ReaderT Request) (StT MaybeT b)))) -> m a) -> MaybeT (ReaderT Request (ResourceT m)) a
outoIO :: IO (StT ResourceT (StT (ReaderT Request) (StT MaybeT b))) -> MaybeT (ReaderT Request (ResourceT IO)) b
prepareGet :: Method Complete f -> Request -> Request
preparePost :: Method Complete f -> ByteString -> Request -> Request
withException :: (MonadCatch m, Exception e, Exception e') => m a -> (e -> e') -> m a

-- | Default Jenkins connection settings
--   
--   <pre>
--   defaultConnectInfo = ConnectInfo
--     { _jenkinsUrl      = "http://example.com/jenkins"
--     , _jenkinsPort     = 8080
--     , _jenkinsUser     = "jenkins"
--     , _jenkinsApiToken = ""
--     }
--   </pre>
defaultConnectInfo :: ConnectInfo

-- | Convenience class aimed at elimination of long chains of lenses to
--   access jenkins connection configuration
--   
--   For example, if you have a configuration record in your application:
--   
--   <pre>
--   data Config = Config
--     { ...
--     , _jenkinsConnectInfo :: ConnectInfo
--     , ...
--     }
--   </pre>
--   
--   you can make it an instance of <a>HasConnectInfo</a>:
--   
--   <pre>
--   instance HasConnectInfo Config where
--     connectInfo f x = (p -&gt; x { _jenkinsConnectInfo = p }) &lt;$&gt; f (_jenkinsConnectInfo x)
--   </pre>
--   
--   and then use e.g. <tt>view jenkinsUrl config</tt> to get the url part
--   of the jenkins connection
class HasConnectInfo t
connectInfo :: HasConnectInfo t => Lens' t ConnectInfo

-- | A lens into Jenkins URL
jenkinsUrl :: HasConnectInfo t => Lens' t String

-- | A lens into Jenkins port
jenkinsPort :: HasConnectInfo t => Lens' t Int

-- | A lens into Jenkins user
jenkinsUser :: HasConnectInfo t => Lens' t Text

-- | A lens into Jenkins user API token
jenkinsApiToken :: HasConnectInfo t => Lens' t Text

-- | A lens into Jenkins password
--   
--   <pre>
--   jenkinsPassword = jenkinsApiToken
--   </pre>
jenkinsPassword :: HasConnectInfo t => Lens' t Text
instance Typeable ConnectInfo
instance Typeable Result
instance Typeable JenkinsException
instance Functor Jenkins
instance Applicative Jenkins
instance Monad Jenkins
instance Show ConnectInfo
instance Eq ConnectInfo
instance Data ConnectInfo
instance Generic ConnectInfo
instance (Show e, Show v) => Show (Result e v)
instance (Eq e, Eq v) => Eq (Result e v)
instance (Ord e, Ord v) => Ord (Result e v)
instance (Data e, Data v) => Data (Result e v)
instance Generic (Result e v)
instance Show JenkinsException
instance Datatype D1ConnectInfo
instance Constructor C1_0ConnectInfo
instance Selector S1_0_0ConnectInfo
instance Selector S1_0_1ConnectInfo
instance Selector S1_0_2ConnectInfo
instance Selector S1_0_3ConnectInfo
instance Datatype D1Result
instance Constructor C1_0Result
instance Constructor C1_1Result
instance Constructor C1_2Result
instance HasConnectInfo ConnectInfo
instance Exception JenkinsException
instance Functor JenkinsF
instance MonadIO Jenkins


-- | Jenkins REST API interface
module Jenkins.Rest

-- | Jenkins REST API query sequence description
data Jenkins a

-- | Convenience class aimed at elimination of long chains of lenses to
--   access jenkins connection configuration
--   
--   For example, if you have a configuration record in your application:
--   
--   <pre>
--   data Config = Config
--     { ...
--     , _jenkinsConnectInfo :: ConnectInfo
--     , ...
--     }
--   </pre>
--   
--   you can make it an instance of <a>HasConnectInfo</a>:
--   
--   <pre>
--   instance HasConnectInfo Config where
--     connectInfo f x = (p -&gt; x { _jenkinsConnectInfo = p }) &lt;$&gt; f (_jenkinsConnectInfo x)
--   </pre>
--   
--   and then use e.g. <tt>view jenkinsUrl config</tt> to get the url part
--   of the jenkins connection
class HasConnectInfo t
connectInfo :: HasConnectInfo t => Lens' t ConnectInfo

-- | Jenkins connection settings
--   
--   <a>_jenkinsApiToken</a> may be user's password, Jenkins does not make
--   any distinction between these concepts
data ConnectInfo
ConnectInfo :: String -> Int -> Text -> Text -> ConnectInfo

-- | Jenkins URL, e.g. <tt>http://example.com/jenkins</tt>
_jenkinsUrl :: ConnectInfo -> String

-- | Jenkins port, e.g. <tt>8080</tt>
_jenkinsPort :: ConnectInfo -> Int

-- | Jenkins user, e.g. <tt>jenkins</tt>
_jenkinsUser :: ConnectInfo -> Text

-- | Jenkins user API token
_jenkinsApiToken :: ConnectInfo -> Text

-- | Default Jenkins connection settings
--   
--   <pre>
--   defaultConnectInfo = ConnectInfo
--     { _jenkinsUrl      = "http://example.com/jenkins"
--     , _jenkinsPort     = 8080
--     , _jenkinsUser     = "jenkins"
--     , _jenkinsApiToken = ""
--     }
--   </pre>
defaultConnectInfo :: ConnectInfo

-- | The result of Jenkins REST API queries
data Result e v

-- | Exception <tt>e</tt> was thrown while querying Jenkins
Error :: e -> Result e v

-- | The client was explicitly disconnected
Disconnect :: Result e v

-- | Querying successfully finished the with value <tt>v</tt>
Result :: v -> Result e v

-- | Query Jenkins API using <a>Jenkins</a> description
--   
--   Successful result is either <a>Disconnect</a> or <tt> <a>Result</a> v
--   </tt>
--   
--   If <a>HttpException</a> was thrown by <tt>http-conduit</tt>,
--   <a>runJenkins</a> catches it and wraps in <a>Error</a>. Other
--   exceptions are <i>not</i> catched
runJenkins :: HasConnectInfo t => t -> Jenkins a -> IO (Result JenkinsException a)

-- | <tt>GET</tt> query
--   
--   While the return type is a lazy bytestring, the entire response sits
--   in memory anyway: lazy I/O is not used
get :: Method Complete f -> Jenkins ByteString

-- | <tt>GET</tt> query
--   
--   If you don't close the source eventually (either explicitly with
--   <a>closeResumableSource</a> or implicitly by reading from it) it will
--   leak a socket.
getS :: Method Complete f -> Jenkins (ResumableSource (ResourceT IO) ByteString)

-- | <tt>POST</tt> query (with a payload)
post :: (forall f. Method Complete f) -> ByteString -> Jenkins ()

-- | <tt>POST</tt> query (without payload)
post_ :: (forall f. Method Complete f) -> Jenkins ()

-- | Do both queries <a>concurrently</a>
concurrently :: Jenkins a -> Jenkins b -> Jenkins (a, b)

-- | <tt>orElse a b</tt> runs <tt>a</tt> and only runs <tt>b</tt> if
--   <tt>a</tt> has thrown a <tt>JenkinsException</tt>
orElse :: Jenkins a -> Jenkins a -> Jenkins a

-- | Lift a computation from the <a>IO</a> monad.
liftIO :: MonadIO m => forall a. IO a -> m a

-- | Make local changes to the <a>Request</a>
with :: (Request -> Request) -> Jenkins a -> Jenkins a

-- | <tt>POST</tt> job's <tt>config.xml</tt> (or any other xml, really) in
--   <tt>xml-conduit</tt> format
postXML :: (forall f. Method Complete f) -> Document -> Jenkins ()

-- | Make a bunch of queries <a>concurrently</a>
traverseC :: (a -> Jenkins b) -> [a] -> Jenkins [b]

-- | Make a bunch of queries <a>concurrently</a> ignoring their results
traverseC_ :: (a -> Jenkins b) -> [a] -> Jenkins ()

-- | Reload jenkins configuration from disk
--   
--   Calls <tt>/reload</tt> and disconnects
reload :: Jenkins a

-- | Restart jenkins safely
--   
--   Calls <tt>/safeRestart</tt> and disconnects
--   
--   <tt>/safeRestart</tt> allows all running jobs to complete
restart :: Jenkins a

-- | Force jenkins to restart without waiting for running jobs to finish
--   
--   Calls <tt>/restart</tt> and disconnects
forceRestart :: Jenkins a

-- | A lens into Jenkins URL
jenkinsUrl :: HasConnectInfo t => Lens' t String

-- | A lens into Jenkins port
jenkinsPort :: HasConnectInfo t => Lens' t Int

-- | A lens into Jenkins user
jenkinsUser :: HasConnectInfo t => Lens' t Text

-- | A lens into Jenkins user API token
jenkinsApiToken :: HasConnectInfo t => Lens' t Text

-- | A lens into Jenkins password
--   
--   <pre>
--   jenkinsPassword = jenkinsApiToken
--   </pre>
jenkinsPassword :: HasConnectInfo t => Lens' t Text

-- | A prism into Jenkins error
_Error :: Prism (Result e a) (Result e' a) e e'

-- | A prism into disconnect
_Disconnect :: Prism' (Result e a) ()

-- | A prism into result
_Result :: Prism (Result e a) (Result e b) a b
newtype JenkinsException
JenkinsHttpException :: HttpException -> JenkinsException

-- | All information on how to connect to a host and what should be sent in
--   the HTTP request.
--   
--   If you simply wish to download from a URL, see <tt>parseUrl</tt>.
--   
--   The constructor for this data type is not exposed. Instead, you should
--   use either the <a>def</a> method to retrieve a default instance, or
--   <tt>parseUrl</tt> to construct from a URL, and then use the records
--   below to make modifications. This approach allows http-client to add
--   configuration options without breaking backwards compatibility.
--   
--   For example, to construct a POST request, you could do something like:
--   
--   <pre>
--   initReq &lt;- parseUrl "http://www.example.com/path"
--   let req = initReq
--               { method = "POST"
--               }
--   </pre>
--   
--   For more information, please see
--   <a>http://www.yesodweb.com/book/settings-types</a>.
--   
--   Since 0.1.0
data Request :: *
data HttpException :: *


-- | Discover Jenkins on the network
module Jenkins.Discover

-- | Jenkins information
data Discover
Discover :: Text -> Text -> Maybe Text -> Discover
version :: Discover -> Text
url :: Discover -> Text
server_id :: Discover -> Maybe Text

-- | Discover Jenkins on the network
discover :: Int -> IO [Discover]
instance Show Discover
instance Eq Discover
